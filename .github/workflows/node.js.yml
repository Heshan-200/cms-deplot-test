name: Deploy Strapi to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci

      - name: Build Strapi
        run: npm run build

      - name: Prepare Deployment Package
        run: |
          mkdir -p deploy
          cp -r build config package.json package-lock.json src database node_modules public .env deploy/
          tar -czf strapi-build.tar.gz -C deploy .

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: strapi-build
          path: strapi-build.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: strapi-build

      - name: Setup SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.MY_EC2_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

      - name: Transfer Build to EC2
        env:
          SSH_HOST: ${{ secrets.MY_EC2_HOST }}
          SSH_USER: ${{ secrets.MY_EC2_USER }}
        run: |
          rsync -avz --progress --no-compress -e "ssh -o StrictHostKeyChecking=no -o Ciphers=aes128-ctr -i private_key.pem" strapi-build.tar.gz $SSH_USER@$SSH_HOST:/home/$SSH_USER/cms-deploy-test/

      - name: Deploy on EC2
        env:
          SSH_HOST: ${{ secrets.MY_EC2_HOST }}
          SSH_USER: ${{ secrets.MY_EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SSH_USER@$SSH_HOST << 'EOF'
            echo "ðŸš€ Starting Automated Deployment..."

            # Navigate to the deployment directory
            cd /home/$SSH_USER/cms-deploy-test/

            # Ensure Node.js, npm, and pm2 are installed
            node -v || (curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - && sudo apt-get install -y nodejs)
            pm2 -v || npm install -g pm2

            cd /home/$SSH_USER/cms-deploy-test/

            # Ensure the public/uploads directory exists
            mkdir -p public/uploads

            # Stop the running Strapi instance if exists
            cd /home/$SSH_USER/cms-deploy-test/
            pm2 stop strapi || true

            # Extract build files
            cd /home/$SSH_USER/cms-deploy-test/
            tar -xvzf strapi-build.tar.gz

            echo "Creating .env file..."

            cd /home/$SSH_USER/cms-deploy-test/
            rm -f .env
            touch .env

            # Extract GitHub secrets and write them to .env
            echo "${{ toJson(secrets) }}" | jq -r 'to_entries | map(select(.key | startswith("GITHUB_SECRET_"))) | map("\(.key | sub("^GITHUB_SECRET_"; ""))=\(.value)") | .[]' > .env

            echo "Generated .env file:"
            cat .env

            cd /home/$SSH_USER/cms-deploy-test/
            rm -rf strapi-build.tar.gz

            # Start or Restart Strapi
            cd /home/$SSH_USER/cms-deploy-test/
            pm2 restart strapi || pm2 start npm --name "strapi" -- start

            echo "âœ… Deployment Completed Successfully!"
          EOF
