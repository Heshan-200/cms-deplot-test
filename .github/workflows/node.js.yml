name: Deploy Strapi to EC2
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - run: npm ci  # Changed to npm ci for consistency
      - run: npm run build
      - run: |
          mkdir -p deploy
          cp -r build config package.json package-lock.json src database node_modules deploy/
          tar -czf strapi-build.tar.gz -C deploy .
      - uses: actions/upload-artifact@v4
        with:
          name: strapi-build
          path: strapi-build.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: strapi-build
      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.MY_EC2_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
      - name: Create .env file locally
        run: |
          echo "Creating .env file locally..."
          rm -f .env
          touch .env
          # Write the custom .env template with specific secrets
          cat << 'EOF' > .env
          # Server
          HOST=0.0.0.0
          PORT=${{ secrets.PORT }}

          # Secrets
          APP_KEYS=${{ secrets.APP_KEYS }}
          API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
          ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
          TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}

          # Database
          DATABASE_CLIENT=${{ secrets.DATABASE_CLIENT }}
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=${{ secrets.DATABASE_PORT }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_SSL=${{ secrets.DATABASE_SSL }}
          DATABASE_FILENAME=${{ secrets.DATABASE_FILENAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          TEST_ENV=${{ secrets.TEST_ENV }}
          EOF
          echo "Generated .env file:"
          cat .env
      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.MY_EC2_HOST }}
        run: |
          rsync -avz --progress --no-compress -e "ssh -o StrictHostKeyChecking=no -o Ciphers=aes128-ctr -i private_key.pem" strapi-build.tar.gz .env ubuntu@$SSH_HOST:/home/ubuntu/cms-deploy-test/
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$SSH_HOST << 'EOF'
            # Create the uploads directory if it doesnâ€™t exist
            mkdir -p /home/ubuntu/cms-deploy-test/public/uploads

            # Stop the existing Strapi process (if any)
            pm2 stop strapi || true

            # Clear memory cache (optional, requires sudo)
            sync && sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches' || echo "Failed to clear memory (sudo required)"

            # Extract the build files
            cd /home/ubuntu/cms-deploy-test/
            tar -xvzf strapi-build.tar.gz

            # Remove the tarball
            cd /home/ubuntu/cms-deploy-test/
            rm -rf strapi-build.tar.gz

            # Install dependencies and start Strapi
            cd /home/ubuntu/cms-deploy-test/
            pm2 restart strapi || pm2 start npm --name "strapi" -- start
          EOF